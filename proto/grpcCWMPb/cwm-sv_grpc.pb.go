// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: grpc/cwm-sv.proto

package grpcCWMPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CWMServiceClient is the client API for CWMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CWMServiceClient interface {
	// User APIs
	CreatUser(ctx context.Context, in *CreatAccountRequest, opts ...grpc.CallOption) (*CreatAccountResponse, error)
	VerifyAuthencode(ctx context.Context, in *VerifyAuthencodeRequest, opts ...grpc.CallOption) (*VerifyAuthencodeResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	SyncContact(ctx context.Context, opts ...grpc.CallOption) (CWMService_SyncContactClient, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	UpdateUsername(ctx context.Context, in *UpdateUsernameRequest, opts ...grpc.CallOption) (*UpdateUsernameResponse, error)
	SearchByUsername(ctx context.Context, in *SearchByUsernameRequest, opts ...grpc.CallOption) (*SearchByUsernameResponse, error)
	SearchByPhoneFull(ctx context.Context, in *SearchByPhoneFullRequest, opts ...grpc.CallOption) (*SearchByPhoneFullResponse, error)
	FindByListPhoneFull(ctx context.Context, in *FindByListPhoneFullRequest, opts ...grpc.CallOption) (*FindByListPhoneFullResponse, error)
	UpdatePushToken(ctx context.Context, in *UpdatePushTokenRequest, opts ...grpc.CallOption) (*UpdatePushTokenResponse, error)
	// Thread APIs
	CreateGroupThread(ctx context.Context, in *CreateGroupThreadRequest, opts ...grpc.CallOption) (*CreateGroupThreadResponse, error)
	CheckGroupThreadInfo(ctx context.Context, in *CheckGroupThreadInfoRequest, opts ...grpc.CallOption) (*CheckGroupThreadInfoResponse, error)
	ChangeGroupThreadName(ctx context.Context, in *ChangeGroupThreadNameRequest, opts ...grpc.CallOption) (*ChangeGroupThreadNameResponse, error)
	AddGroupThreadParticipant(ctx context.Context, in *AddGroupThreadParticipantRequest, opts ...grpc.CallOption) (*AddGroupThreadParticipantResponse, error)
	RemoveGroupThreadParticipant(ctx context.Context, in *RemoveGroupThreadParticipantRequest, opts ...grpc.CallOption) (*RemoveGroupThreadParticipantResponse, error)
	PromoteGroupThreadAdmin(ctx context.Context, in *PromoteGroupThreadAdminRequest, opts ...grpc.CallOption) (*PromoteGroupThreadAdminResponse, error)
	RevokeGroupThreadAdmin(ctx context.Context, in *RevokeGroupThreadAdminRequest, opts ...grpc.CallOption) (*RevokeGroupThreadAdminResponse, error)
	LeaveGroupThread(ctx context.Context, in *LeaveGroupThreadRequest, opts ...grpc.CallOption) (*LeaveGroupThreadResponse, error)
	DeleteAndLeaveGroupThread(ctx context.Context, in *DeleteAndLeaveGroupThreadRequest, opts ...grpc.CallOption) (*DeleteAndLeaveGroupThreadResponse, error)
	// Msg APIs
	InitialSyncMsg(ctx context.Context, in *InitialSyncMsgRequest, opts ...grpc.CallOption) (CWMService_InitialSyncMsgClient, error)
	FetchAllUnreceivedMsg(ctx context.Context, in *FetchAllUnreceivedMsgRequest, opts ...grpc.CallOption) (CWMService_FetchAllUnreceivedMsgClient, error)
	FetchOldMsgOfThread(ctx context.Context, in *FetchOldMsgOfThreadRequest, opts ...grpc.CallOption) (CWMService_FetchOldMsgOfThreadClient, error)
	SendMsg(ctx context.Context, in *SendMsgRequest, opts ...grpc.CallOption) (*SendMsgResponse, error)
	ConfirmReceivedMsgs(ctx context.Context, in *ConfirmReceivedMsgsRequest, opts ...grpc.CallOption) (*ConfirmReceivedMsgsResponse, error)
	DeleteMsgsOfThread(ctx context.Context, in *DeleteMsgsOfThreadRequest, opts ...grpc.CallOption) (*DeleteMsgsOfThreadResponse, error)
	ClearAllMsgOfThread(ctx context.Context, in *ClearAllMsgOfThreadRequest, opts ...grpc.CallOption) (*ClearAllMsgOfThreadResponse, error)
	DeleteSoloThread(ctx context.Context, in *DeleteSoloThreadRequest, opts ...grpc.CallOption) (*DeleteSoloThreadResponse, error)
	UploadMediaMsg(ctx context.Context, opts ...grpc.CallOption) (CWMService_UploadMediaMsgClient, error)
	DownloadMediaMsg(ctx context.Context, in *DownloadMediaMsgRequest, opts ...grpc.CallOption) (CWMService_DownloadMediaMsgClient, error)
}

type cWMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCWMServiceClient(cc grpc.ClientConnInterface) CWMServiceClient {
	return &cWMServiceClient{cc}
}

func (c *cWMServiceClient) CreatUser(ctx context.Context, in *CreatAccountRequest, opts ...grpc.CallOption) (*CreatAccountResponse, error) {
	out := new(CreatAccountResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/CreatUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) VerifyAuthencode(ctx context.Context, in *VerifyAuthencodeRequest, opts ...grpc.CallOption) (*VerifyAuthencodeResponse, error) {
	out := new(VerifyAuthencodeResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/VerifyAuthencode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) SyncContact(ctx context.Context, opts ...grpc.CallOption) (CWMService_SyncContactClient, error) {
	stream, err := c.cc.NewStream(ctx, &CWMService_ServiceDesc.Streams[0], "/grpcCWMPb.CWMService/SyncContact", opts...)
	if err != nil {
		return nil, err
	}
	x := &cWMServiceSyncContactClient{stream}
	return x, nil
}

type CWMService_SyncContactClient interface {
	Send(*SyncContactRequest) error
	Recv() (*SyncContactResponse, error)
	grpc.ClientStream
}

type cWMServiceSyncContactClient struct {
	grpc.ClientStream
}

func (x *cWMServiceSyncContactClient) Send(m *SyncContactRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cWMServiceSyncContactClient) Recv() (*SyncContactResponse, error) {
	m := new(SyncContactResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cWMServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	out := new(UpdateProfileResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) UpdateUsername(ctx context.Context, in *UpdateUsernameRequest, opts ...grpc.CallOption) (*UpdateUsernameResponse, error) {
	out := new(UpdateUsernameResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/UpdateUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) SearchByUsername(ctx context.Context, in *SearchByUsernameRequest, opts ...grpc.CallOption) (*SearchByUsernameResponse, error) {
	out := new(SearchByUsernameResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/SearchByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) SearchByPhoneFull(ctx context.Context, in *SearchByPhoneFullRequest, opts ...grpc.CallOption) (*SearchByPhoneFullResponse, error) {
	out := new(SearchByPhoneFullResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/SearchByPhoneFull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) FindByListPhoneFull(ctx context.Context, in *FindByListPhoneFullRequest, opts ...grpc.CallOption) (*FindByListPhoneFullResponse, error) {
	out := new(FindByListPhoneFullResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/FindByListPhoneFull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) UpdatePushToken(ctx context.Context, in *UpdatePushTokenRequest, opts ...grpc.CallOption) (*UpdatePushTokenResponse, error) {
	out := new(UpdatePushTokenResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/UpdatePushToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) CreateGroupThread(ctx context.Context, in *CreateGroupThreadRequest, opts ...grpc.CallOption) (*CreateGroupThreadResponse, error) {
	out := new(CreateGroupThreadResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/CreateGroupThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) CheckGroupThreadInfo(ctx context.Context, in *CheckGroupThreadInfoRequest, opts ...grpc.CallOption) (*CheckGroupThreadInfoResponse, error) {
	out := new(CheckGroupThreadInfoResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/CheckGroupThreadInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) ChangeGroupThreadName(ctx context.Context, in *ChangeGroupThreadNameRequest, opts ...grpc.CallOption) (*ChangeGroupThreadNameResponse, error) {
	out := new(ChangeGroupThreadNameResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/ChangeGroupThreadName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) AddGroupThreadParticipant(ctx context.Context, in *AddGroupThreadParticipantRequest, opts ...grpc.CallOption) (*AddGroupThreadParticipantResponse, error) {
	out := new(AddGroupThreadParticipantResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/AddGroupThreadParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) RemoveGroupThreadParticipant(ctx context.Context, in *RemoveGroupThreadParticipantRequest, opts ...grpc.CallOption) (*RemoveGroupThreadParticipantResponse, error) {
	out := new(RemoveGroupThreadParticipantResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/RemoveGroupThreadParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) PromoteGroupThreadAdmin(ctx context.Context, in *PromoteGroupThreadAdminRequest, opts ...grpc.CallOption) (*PromoteGroupThreadAdminResponse, error) {
	out := new(PromoteGroupThreadAdminResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/PromoteGroupThreadAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) RevokeGroupThreadAdmin(ctx context.Context, in *RevokeGroupThreadAdminRequest, opts ...grpc.CallOption) (*RevokeGroupThreadAdminResponse, error) {
	out := new(RevokeGroupThreadAdminResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/RevokeGroupThreadAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) LeaveGroupThread(ctx context.Context, in *LeaveGroupThreadRequest, opts ...grpc.CallOption) (*LeaveGroupThreadResponse, error) {
	out := new(LeaveGroupThreadResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/LeaveGroupThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) DeleteAndLeaveGroupThread(ctx context.Context, in *DeleteAndLeaveGroupThreadRequest, opts ...grpc.CallOption) (*DeleteAndLeaveGroupThreadResponse, error) {
	out := new(DeleteAndLeaveGroupThreadResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/DeleteAndLeaveGroupThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) InitialSyncMsg(ctx context.Context, in *InitialSyncMsgRequest, opts ...grpc.CallOption) (CWMService_InitialSyncMsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &CWMService_ServiceDesc.Streams[1], "/grpcCWMPb.CWMService/InitialSyncMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &cWMServiceInitialSyncMsgClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CWMService_InitialSyncMsgClient interface {
	Recv() (*InitialSyncMsgResponse, error)
	grpc.ClientStream
}

type cWMServiceInitialSyncMsgClient struct {
	grpc.ClientStream
}

func (x *cWMServiceInitialSyncMsgClient) Recv() (*InitialSyncMsgResponse, error) {
	m := new(InitialSyncMsgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cWMServiceClient) FetchAllUnreceivedMsg(ctx context.Context, in *FetchAllUnreceivedMsgRequest, opts ...grpc.CallOption) (CWMService_FetchAllUnreceivedMsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &CWMService_ServiceDesc.Streams[2], "/grpcCWMPb.CWMService/FetchAllUnreceivedMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &cWMServiceFetchAllUnreceivedMsgClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CWMService_FetchAllUnreceivedMsgClient interface {
	Recv() (*FetchAllUnreceivedMsgResponse, error)
	grpc.ClientStream
}

type cWMServiceFetchAllUnreceivedMsgClient struct {
	grpc.ClientStream
}

func (x *cWMServiceFetchAllUnreceivedMsgClient) Recv() (*FetchAllUnreceivedMsgResponse, error) {
	m := new(FetchAllUnreceivedMsgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cWMServiceClient) FetchOldMsgOfThread(ctx context.Context, in *FetchOldMsgOfThreadRequest, opts ...grpc.CallOption) (CWMService_FetchOldMsgOfThreadClient, error) {
	stream, err := c.cc.NewStream(ctx, &CWMService_ServiceDesc.Streams[3], "/grpcCWMPb.CWMService/FetchOldMsgOfThread", opts...)
	if err != nil {
		return nil, err
	}
	x := &cWMServiceFetchOldMsgOfThreadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CWMService_FetchOldMsgOfThreadClient interface {
	Recv() (*FetchOldMsgOfThreadResponse, error)
	grpc.ClientStream
}

type cWMServiceFetchOldMsgOfThreadClient struct {
	grpc.ClientStream
}

func (x *cWMServiceFetchOldMsgOfThreadClient) Recv() (*FetchOldMsgOfThreadResponse, error) {
	m := new(FetchOldMsgOfThreadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cWMServiceClient) SendMsg(ctx context.Context, in *SendMsgRequest, opts ...grpc.CallOption) (*SendMsgResponse, error) {
	out := new(SendMsgResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) ConfirmReceivedMsgs(ctx context.Context, in *ConfirmReceivedMsgsRequest, opts ...grpc.CallOption) (*ConfirmReceivedMsgsResponse, error) {
	out := new(ConfirmReceivedMsgsResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/ConfirmReceivedMsgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) DeleteMsgsOfThread(ctx context.Context, in *DeleteMsgsOfThreadRequest, opts ...grpc.CallOption) (*DeleteMsgsOfThreadResponse, error) {
	out := new(DeleteMsgsOfThreadResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/DeleteMsgsOfThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) ClearAllMsgOfThread(ctx context.Context, in *ClearAllMsgOfThreadRequest, opts ...grpc.CallOption) (*ClearAllMsgOfThreadResponse, error) {
	out := new(ClearAllMsgOfThreadResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/ClearAllMsgOfThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) DeleteSoloThread(ctx context.Context, in *DeleteSoloThreadRequest, opts ...grpc.CallOption) (*DeleteSoloThreadResponse, error) {
	out := new(DeleteSoloThreadResponse)
	err := c.cc.Invoke(ctx, "/grpcCWMPb.CWMService/DeleteSoloThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cWMServiceClient) UploadMediaMsg(ctx context.Context, opts ...grpc.CallOption) (CWMService_UploadMediaMsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &CWMService_ServiceDesc.Streams[4], "/grpcCWMPb.CWMService/UploadMediaMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &cWMServiceUploadMediaMsgClient{stream}
	return x, nil
}

type CWMService_UploadMediaMsgClient interface {
	Send(*UploadMediaMsgRequest) error
	CloseAndRecv() (*UploadMediaMsgResponse, error)
	grpc.ClientStream
}

type cWMServiceUploadMediaMsgClient struct {
	grpc.ClientStream
}

func (x *cWMServiceUploadMediaMsgClient) Send(m *UploadMediaMsgRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cWMServiceUploadMediaMsgClient) CloseAndRecv() (*UploadMediaMsgResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadMediaMsgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cWMServiceClient) DownloadMediaMsg(ctx context.Context, in *DownloadMediaMsgRequest, opts ...grpc.CallOption) (CWMService_DownloadMediaMsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &CWMService_ServiceDesc.Streams[5], "/grpcCWMPb.CWMService/DownloadMediaMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &cWMServiceDownloadMediaMsgClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CWMService_DownloadMediaMsgClient interface {
	Recv() (*DownloadMediaMsgResponse, error)
	grpc.ClientStream
}

type cWMServiceDownloadMediaMsgClient struct {
	grpc.ClientStream
}

func (x *cWMServiceDownloadMediaMsgClient) Recv() (*DownloadMediaMsgResponse, error) {
	m := new(DownloadMediaMsgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CWMServiceServer is the server API for CWMService service.
// All implementations must embed UnimplementedCWMServiceServer
// for forward compatibility
type CWMServiceServer interface {
	// User APIs
	CreatUser(context.Context, *CreatAccountRequest) (*CreatAccountResponse, error)
	VerifyAuthencode(context.Context, *VerifyAuthencodeRequest) (*VerifyAuthencodeResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	SyncContact(CWMService_SyncContactServer) error
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	UpdateUsername(context.Context, *UpdateUsernameRequest) (*UpdateUsernameResponse, error)
	SearchByUsername(context.Context, *SearchByUsernameRequest) (*SearchByUsernameResponse, error)
	SearchByPhoneFull(context.Context, *SearchByPhoneFullRequest) (*SearchByPhoneFullResponse, error)
	FindByListPhoneFull(context.Context, *FindByListPhoneFullRequest) (*FindByListPhoneFullResponse, error)
	UpdatePushToken(context.Context, *UpdatePushTokenRequest) (*UpdatePushTokenResponse, error)
	// Thread APIs
	CreateGroupThread(context.Context, *CreateGroupThreadRequest) (*CreateGroupThreadResponse, error)
	CheckGroupThreadInfo(context.Context, *CheckGroupThreadInfoRequest) (*CheckGroupThreadInfoResponse, error)
	ChangeGroupThreadName(context.Context, *ChangeGroupThreadNameRequest) (*ChangeGroupThreadNameResponse, error)
	AddGroupThreadParticipant(context.Context, *AddGroupThreadParticipantRequest) (*AddGroupThreadParticipantResponse, error)
	RemoveGroupThreadParticipant(context.Context, *RemoveGroupThreadParticipantRequest) (*RemoveGroupThreadParticipantResponse, error)
	PromoteGroupThreadAdmin(context.Context, *PromoteGroupThreadAdminRequest) (*PromoteGroupThreadAdminResponse, error)
	RevokeGroupThreadAdmin(context.Context, *RevokeGroupThreadAdminRequest) (*RevokeGroupThreadAdminResponse, error)
	LeaveGroupThread(context.Context, *LeaveGroupThreadRequest) (*LeaveGroupThreadResponse, error)
	DeleteAndLeaveGroupThread(context.Context, *DeleteAndLeaveGroupThreadRequest) (*DeleteAndLeaveGroupThreadResponse, error)
	// Msg APIs
	InitialSyncMsg(*InitialSyncMsgRequest, CWMService_InitialSyncMsgServer) error
	FetchAllUnreceivedMsg(*FetchAllUnreceivedMsgRequest, CWMService_FetchAllUnreceivedMsgServer) error
	FetchOldMsgOfThread(*FetchOldMsgOfThreadRequest, CWMService_FetchOldMsgOfThreadServer) error
	SendMsg(context.Context, *SendMsgRequest) (*SendMsgResponse, error)
	ConfirmReceivedMsgs(context.Context, *ConfirmReceivedMsgsRequest) (*ConfirmReceivedMsgsResponse, error)
	DeleteMsgsOfThread(context.Context, *DeleteMsgsOfThreadRequest) (*DeleteMsgsOfThreadResponse, error)
	ClearAllMsgOfThread(context.Context, *ClearAllMsgOfThreadRequest) (*ClearAllMsgOfThreadResponse, error)
	DeleteSoloThread(context.Context, *DeleteSoloThreadRequest) (*DeleteSoloThreadResponse, error)
	UploadMediaMsg(CWMService_UploadMediaMsgServer) error
	DownloadMediaMsg(*DownloadMediaMsgRequest, CWMService_DownloadMediaMsgServer) error
	mustEmbedUnimplementedCWMServiceServer()
}

// UnimplementedCWMServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCWMServiceServer struct {
}

func (UnimplementedCWMServiceServer) CreatUser(context.Context, *CreatAccountRequest) (*CreatAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatUser not implemented")
}
func (UnimplementedCWMServiceServer) VerifyAuthencode(context.Context, *VerifyAuthencodeRequest) (*VerifyAuthencodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAuthencode not implemented")
}
func (UnimplementedCWMServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedCWMServiceServer) SyncContact(CWMService_SyncContactServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncContact not implemented")
}
func (UnimplementedCWMServiceServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedCWMServiceServer) UpdateUsername(context.Context, *UpdateUsernameRequest) (*UpdateUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsername not implemented")
}
func (UnimplementedCWMServiceServer) SearchByUsername(context.Context, *SearchByUsernameRequest) (*SearchByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByUsername not implemented")
}
func (UnimplementedCWMServiceServer) SearchByPhoneFull(context.Context, *SearchByPhoneFullRequest) (*SearchByPhoneFullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByPhoneFull not implemented")
}
func (UnimplementedCWMServiceServer) FindByListPhoneFull(context.Context, *FindByListPhoneFullRequest) (*FindByListPhoneFullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByListPhoneFull not implemented")
}
func (UnimplementedCWMServiceServer) UpdatePushToken(context.Context, *UpdatePushTokenRequest) (*UpdatePushTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePushToken not implemented")
}
func (UnimplementedCWMServiceServer) CreateGroupThread(context.Context, *CreateGroupThreadRequest) (*CreateGroupThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupThread not implemented")
}
func (UnimplementedCWMServiceServer) CheckGroupThreadInfo(context.Context, *CheckGroupThreadInfoRequest) (*CheckGroupThreadInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckGroupThreadInfo not implemented")
}
func (UnimplementedCWMServiceServer) ChangeGroupThreadName(context.Context, *ChangeGroupThreadNameRequest) (*ChangeGroupThreadNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeGroupThreadName not implemented")
}
func (UnimplementedCWMServiceServer) AddGroupThreadParticipant(context.Context, *AddGroupThreadParticipantRequest) (*AddGroupThreadParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupThreadParticipant not implemented")
}
func (UnimplementedCWMServiceServer) RemoveGroupThreadParticipant(context.Context, *RemoveGroupThreadParticipantRequest) (*RemoveGroupThreadParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupThreadParticipant not implemented")
}
func (UnimplementedCWMServiceServer) PromoteGroupThreadAdmin(context.Context, *PromoteGroupThreadAdminRequest) (*PromoteGroupThreadAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteGroupThreadAdmin not implemented")
}
func (UnimplementedCWMServiceServer) RevokeGroupThreadAdmin(context.Context, *RevokeGroupThreadAdminRequest) (*RevokeGroupThreadAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeGroupThreadAdmin not implemented")
}
func (UnimplementedCWMServiceServer) LeaveGroupThread(context.Context, *LeaveGroupThreadRequest) (*LeaveGroupThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroupThread not implemented")
}
func (UnimplementedCWMServiceServer) DeleteAndLeaveGroupThread(context.Context, *DeleteAndLeaveGroupThreadRequest) (*DeleteAndLeaveGroupThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAndLeaveGroupThread not implemented")
}
func (UnimplementedCWMServiceServer) InitialSyncMsg(*InitialSyncMsgRequest, CWMService_InitialSyncMsgServer) error {
	return status.Errorf(codes.Unimplemented, "method InitialSyncMsg not implemented")
}
func (UnimplementedCWMServiceServer) FetchAllUnreceivedMsg(*FetchAllUnreceivedMsgRequest, CWMService_FetchAllUnreceivedMsgServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchAllUnreceivedMsg not implemented")
}
func (UnimplementedCWMServiceServer) FetchOldMsgOfThread(*FetchOldMsgOfThreadRequest, CWMService_FetchOldMsgOfThreadServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchOldMsgOfThread not implemented")
}
func (UnimplementedCWMServiceServer) SendMsg(context.Context, *SendMsgRequest) (*SendMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedCWMServiceServer) ConfirmReceivedMsgs(context.Context, *ConfirmReceivedMsgsRequest) (*ConfirmReceivedMsgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmReceivedMsgs not implemented")
}
func (UnimplementedCWMServiceServer) DeleteMsgsOfThread(context.Context, *DeleteMsgsOfThreadRequest) (*DeleteMsgsOfThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMsgsOfThread not implemented")
}
func (UnimplementedCWMServiceServer) ClearAllMsgOfThread(context.Context, *ClearAllMsgOfThreadRequest) (*ClearAllMsgOfThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearAllMsgOfThread not implemented")
}
func (UnimplementedCWMServiceServer) DeleteSoloThread(context.Context, *DeleteSoloThreadRequest) (*DeleteSoloThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSoloThread not implemented")
}
func (UnimplementedCWMServiceServer) UploadMediaMsg(CWMService_UploadMediaMsgServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadMediaMsg not implemented")
}
func (UnimplementedCWMServiceServer) DownloadMediaMsg(*DownloadMediaMsgRequest, CWMService_DownloadMediaMsgServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadMediaMsg not implemented")
}
func (UnimplementedCWMServiceServer) mustEmbedUnimplementedCWMServiceServer() {}

// UnsafeCWMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CWMServiceServer will
// result in compilation errors.
type UnsafeCWMServiceServer interface {
	mustEmbedUnimplementedCWMServiceServer()
}

func RegisterCWMServiceServer(s grpc.ServiceRegistrar, srv CWMServiceServer) {
	s.RegisterService(&CWMService_ServiceDesc, srv)
}

func _CWMService_CreatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).CreatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/CreatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).CreatUser(ctx, req.(*CreatAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_VerifyAuthencode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAuthencodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).VerifyAuthencode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/VerifyAuthencode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).VerifyAuthencode(ctx, req.(*VerifyAuthencodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_SyncContact_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CWMServiceServer).SyncContact(&cWMServiceSyncContactServer{stream})
}

type CWMService_SyncContactServer interface {
	Send(*SyncContactResponse) error
	Recv() (*SyncContactRequest, error)
	grpc.ServerStream
}

type cWMServiceSyncContactServer struct {
	grpc.ServerStream
}

func (x *cWMServiceSyncContactServer) Send(m *SyncContactResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cWMServiceSyncContactServer) Recv() (*SyncContactRequest, error) {
	m := new(SyncContactRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CWMService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_UpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).UpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/UpdateUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).UpdateUsername(ctx, req.(*UpdateUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_SearchByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).SearchByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/SearchByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).SearchByUsername(ctx, req.(*SearchByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_SearchByPhoneFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByPhoneFullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).SearchByPhoneFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/SearchByPhoneFull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).SearchByPhoneFull(ctx, req.(*SearchByPhoneFullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_FindByListPhoneFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByListPhoneFullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).FindByListPhoneFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/FindByListPhoneFull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).FindByListPhoneFull(ctx, req.(*FindByListPhoneFullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_UpdatePushToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePushTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).UpdatePushToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/UpdatePushToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).UpdatePushToken(ctx, req.(*UpdatePushTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_CreateGroupThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).CreateGroupThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/CreateGroupThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).CreateGroupThread(ctx, req.(*CreateGroupThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_CheckGroupThreadInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckGroupThreadInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).CheckGroupThreadInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/CheckGroupThreadInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).CheckGroupThreadInfo(ctx, req.(*CheckGroupThreadInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_ChangeGroupThreadName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeGroupThreadNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).ChangeGroupThreadName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/ChangeGroupThreadName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).ChangeGroupThreadName(ctx, req.(*ChangeGroupThreadNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_AddGroupThreadParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupThreadParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).AddGroupThreadParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/AddGroupThreadParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).AddGroupThreadParticipant(ctx, req.(*AddGroupThreadParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_RemoveGroupThreadParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupThreadParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).RemoveGroupThreadParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/RemoveGroupThreadParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).RemoveGroupThreadParticipant(ctx, req.(*RemoveGroupThreadParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_PromoteGroupThreadAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteGroupThreadAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).PromoteGroupThreadAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/PromoteGroupThreadAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).PromoteGroupThreadAdmin(ctx, req.(*PromoteGroupThreadAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_RevokeGroupThreadAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeGroupThreadAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).RevokeGroupThreadAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/RevokeGroupThreadAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).RevokeGroupThreadAdmin(ctx, req.(*RevokeGroupThreadAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_LeaveGroupThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).LeaveGroupThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/LeaveGroupThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).LeaveGroupThread(ctx, req.(*LeaveGroupThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_DeleteAndLeaveGroupThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAndLeaveGroupThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).DeleteAndLeaveGroupThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/DeleteAndLeaveGroupThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).DeleteAndLeaveGroupThread(ctx, req.(*DeleteAndLeaveGroupThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_InitialSyncMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InitialSyncMsgRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CWMServiceServer).InitialSyncMsg(m, &cWMServiceInitialSyncMsgServer{stream})
}

type CWMService_InitialSyncMsgServer interface {
	Send(*InitialSyncMsgResponse) error
	grpc.ServerStream
}

type cWMServiceInitialSyncMsgServer struct {
	grpc.ServerStream
}

func (x *cWMServiceInitialSyncMsgServer) Send(m *InitialSyncMsgResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CWMService_FetchAllUnreceivedMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchAllUnreceivedMsgRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CWMServiceServer).FetchAllUnreceivedMsg(m, &cWMServiceFetchAllUnreceivedMsgServer{stream})
}

type CWMService_FetchAllUnreceivedMsgServer interface {
	Send(*FetchAllUnreceivedMsgResponse) error
	grpc.ServerStream
}

type cWMServiceFetchAllUnreceivedMsgServer struct {
	grpc.ServerStream
}

func (x *cWMServiceFetchAllUnreceivedMsgServer) Send(m *FetchAllUnreceivedMsgResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CWMService_FetchOldMsgOfThread_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchOldMsgOfThreadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CWMServiceServer).FetchOldMsgOfThread(m, &cWMServiceFetchOldMsgOfThreadServer{stream})
}

type CWMService_FetchOldMsgOfThreadServer interface {
	Send(*FetchOldMsgOfThreadResponse) error
	grpc.ServerStream
}

type cWMServiceFetchOldMsgOfThreadServer struct {
	grpc.ServerStream
}

func (x *cWMServiceFetchOldMsgOfThreadServer) Send(m *FetchOldMsgOfThreadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CWMService_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).SendMsg(ctx, req.(*SendMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_ConfirmReceivedMsgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmReceivedMsgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).ConfirmReceivedMsgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/ConfirmReceivedMsgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).ConfirmReceivedMsgs(ctx, req.(*ConfirmReceivedMsgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_DeleteMsgsOfThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMsgsOfThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).DeleteMsgsOfThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/DeleteMsgsOfThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).DeleteMsgsOfThread(ctx, req.(*DeleteMsgsOfThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_ClearAllMsgOfThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearAllMsgOfThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).ClearAllMsgOfThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/ClearAllMsgOfThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).ClearAllMsgOfThread(ctx, req.(*ClearAllMsgOfThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_DeleteSoloThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSoloThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CWMServiceServer).DeleteSoloThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcCWMPb.CWMService/DeleteSoloThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CWMServiceServer).DeleteSoloThread(ctx, req.(*DeleteSoloThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CWMService_UploadMediaMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CWMServiceServer).UploadMediaMsg(&cWMServiceUploadMediaMsgServer{stream})
}

type CWMService_UploadMediaMsgServer interface {
	SendAndClose(*UploadMediaMsgResponse) error
	Recv() (*UploadMediaMsgRequest, error)
	grpc.ServerStream
}

type cWMServiceUploadMediaMsgServer struct {
	grpc.ServerStream
}

func (x *cWMServiceUploadMediaMsgServer) SendAndClose(m *UploadMediaMsgResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cWMServiceUploadMediaMsgServer) Recv() (*UploadMediaMsgRequest, error) {
	m := new(UploadMediaMsgRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CWMService_DownloadMediaMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadMediaMsgRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CWMServiceServer).DownloadMediaMsg(m, &cWMServiceDownloadMediaMsgServer{stream})
}

type CWMService_DownloadMediaMsgServer interface {
	Send(*DownloadMediaMsgResponse) error
	grpc.ServerStream
}

type cWMServiceDownloadMediaMsgServer struct {
	grpc.ServerStream
}

func (x *cWMServiceDownloadMediaMsgServer) Send(m *DownloadMediaMsgResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CWMService_ServiceDesc is the grpc.ServiceDesc for CWMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CWMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcCWMPb.CWMService",
	HandlerType: (*CWMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatUser",
			Handler:    _CWMService_CreatUser_Handler,
		},
		{
			MethodName: "VerifyAuthencode",
			Handler:    _CWMService_VerifyAuthencode_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _CWMService_Login_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _CWMService_UpdateProfile_Handler,
		},
		{
			MethodName: "UpdateUsername",
			Handler:    _CWMService_UpdateUsername_Handler,
		},
		{
			MethodName: "SearchByUsername",
			Handler:    _CWMService_SearchByUsername_Handler,
		},
		{
			MethodName: "SearchByPhoneFull",
			Handler:    _CWMService_SearchByPhoneFull_Handler,
		},
		{
			MethodName: "FindByListPhoneFull",
			Handler:    _CWMService_FindByListPhoneFull_Handler,
		},
		{
			MethodName: "UpdatePushToken",
			Handler:    _CWMService_UpdatePushToken_Handler,
		},
		{
			MethodName: "CreateGroupThread",
			Handler:    _CWMService_CreateGroupThread_Handler,
		},
		{
			MethodName: "CheckGroupThreadInfo",
			Handler:    _CWMService_CheckGroupThreadInfo_Handler,
		},
		{
			MethodName: "ChangeGroupThreadName",
			Handler:    _CWMService_ChangeGroupThreadName_Handler,
		},
		{
			MethodName: "AddGroupThreadParticipant",
			Handler:    _CWMService_AddGroupThreadParticipant_Handler,
		},
		{
			MethodName: "RemoveGroupThreadParticipant",
			Handler:    _CWMService_RemoveGroupThreadParticipant_Handler,
		},
		{
			MethodName: "PromoteGroupThreadAdmin",
			Handler:    _CWMService_PromoteGroupThreadAdmin_Handler,
		},
		{
			MethodName: "RevokeGroupThreadAdmin",
			Handler:    _CWMService_RevokeGroupThreadAdmin_Handler,
		},
		{
			MethodName: "LeaveGroupThread",
			Handler:    _CWMService_LeaveGroupThread_Handler,
		},
		{
			MethodName: "DeleteAndLeaveGroupThread",
			Handler:    _CWMService_DeleteAndLeaveGroupThread_Handler,
		},
		{
			MethodName: "SendMsg",
			Handler:    _CWMService_SendMsg_Handler,
		},
		{
			MethodName: "ConfirmReceivedMsgs",
			Handler:    _CWMService_ConfirmReceivedMsgs_Handler,
		},
		{
			MethodName: "DeleteMsgsOfThread",
			Handler:    _CWMService_DeleteMsgsOfThread_Handler,
		},
		{
			MethodName: "ClearAllMsgOfThread",
			Handler:    _CWMService_ClearAllMsgOfThread_Handler,
		},
		{
			MethodName: "DeleteSoloThread",
			Handler:    _CWMService_DeleteSoloThread_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncContact",
			Handler:       _CWMService_SyncContact_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "InitialSyncMsg",
			Handler:       _CWMService_InitialSyncMsg_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchAllUnreceivedMsg",
			Handler:       _CWMService_FetchAllUnreceivedMsg_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchOldMsgOfThread",
			Handler:       _CWMService_FetchOldMsgOfThread_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadMediaMsg",
			Handler:       _CWMService_UploadMediaMsg_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadMediaMsg",
			Handler:       _CWMService_DownloadMediaMsg_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/cwm-sv.proto",
}
